/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
#pragma once
#include <AzCore/RTTI/RTTI.h>
#include "InputSubComponent.h"

namespace Input
{

    //////////////////////////////////////////////////////////////////////////
    /// This class holds all of the raw input handlers that generate events.
    //////////////////////////////////////////////////////////////////////////
    class InputEventGroup
    {
    public:
        AZ_RTTI(InputEventGroup, "{25143B7E-2FEC-4CC5-92FE-270B67E79734}");
        virtual ~InputEventGroup() = default;

        static void Reflect(AZ::ReflectContext* reflection)
        {
            if (AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection))
            {
                serializeContext->Class<InputEventGroup>()
                    ->Version(1)
                    ->Field("Event Name", &InputEventGroup::m_eventName)
                    ->Field("Event Generators", &InputEventGroup::m_inputHandlers);

                if (AZ::EditContext* editContext = serializeContext->GetEditContext())
                {
                    editContext->Class<InputEventGroup>("InputEventGroup", "Groups input bindings by the event they generate")
                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                            ->Attribute(AZ::Edit::Attributes::NameLabelOverride, &InputEventGroup::GetEditorText)
                        ->DataElement(0, &InputEventGroup::m_eventName, "Event Name", "The event generated by the collection of Input Bindings")
                            ->Attribute(AZ::Edit::Attributes::ChangeNotify, AZ_CRC("RefreshAttributesAndValues"))
                        ->DataElement(0, &InputEventGroup::m_inputHandlers, "Event Generators", "handlers that generate named events");
                }
            }
        }

        virtual void Activate(const AZ::EntityId& channel)
        {
            AZ::GameplayNotificationId busId(channel, m_eventName.c_str());
            for (InputSubComponent* inputEventBinding : m_inputHandlers)
            {
                inputEventBinding->Activate(busId);
            }
        }
        virtual void Deactivate(const AZ::EntityId& channel)
        {
            AZ::GameplayNotificationId busId(channel, m_eventName.c_str());
            for (InputSubComponent* inputEventBinding : m_inputHandlers)
            {
                inputEventBinding->Deactivate(busId);
            }
        }
    protected:
        virtual AZStd::string GetEditorText() const
        {
            return m_eventName.empty() ? "<Unspecified Event>" : m_eventName;
        }
    private:
        AZStd::vector<InputSubComponent*> m_inputHandlers;
        AZStd::string m_eventName;
    };
} // namespace Input